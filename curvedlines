import cv2
import numpy as np

def region_of_interest(img, vertices):
    mask = np.zeros_like(img)
    cv2.fillPoly(mask, [vertices], 255)
    masked = cv2.bitwise_and(img, mask)
    return masked

def draw_roi(img, vertices):
    cv2.polylines(img, [vertices], isClosed=True, color=(255, 0, 0), thickness=2)

def process_image_for_curves(img, roi_vertices):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    canny_image = cv2.Canny(blurred, 50, 150)
    
    # Mask the canny image using the ROI so that we can focus on that region
    masked_canny = region_of_interest(canny_image, roi_vertices)

    # Find contours within the ROI
    contours, _ = cv2.findContours(masked_canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Draw the contours on the original image
    for cnt in contours:
        cv2.drawContours(img, [cnt], -1, (0, 255, 0), 3)

    return img

cap = cv2.VideoCapture(0)

# Define ROI vertices relative to the camera resolution
# Adjust these values if your resolution is different
ret, frame = cap.read()
rows, cols, _ = frame.shape
roi_width = cols * 0.6 # 60% of the frame width
roi_height = rows * 0.6 # 60% of the frame height
top_left_vertex = (int((cols - roi_width) / 2), int((rows - roi_height) / 2))
bottom_right_vertex = (int((cols + roi_width) / 2), int((rows + roi_height) / 2))

roi_vertices = np.array([top_left_vertex,
                         (top_left_vertex[0], bottom_right_vertex[1]),
                         bottom_right_vertex,
                         (bottom_right_vertex[0], top_left_vertex[1])], dtype=np.int32)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break
    
    # Process the frame to detect curves within the ROI and draw the ROI
    processed_frame = process_image_for_curves(frame, roi_vertices)
    draw_roi(processed_frame, roi_vertices)
    
    cv2.imshow("Frame", processed_frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
